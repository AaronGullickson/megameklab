import java.time.LocalDateTime

plugins {
    id 'application'
    id 'maven-publish'
    id 'edu.sc.seis.launch4j' version '3.0.5'
    id 'jacoco'
    id 'java'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
        resources {
            srcDirs = ['resources']
        }
    }
    test {
        java {
            srcDirs = ['unittests']
        }
        resources {
            srcDirs = ['testresources']
        }
    }
}

dependencies {
    implementation "org.megamek:megamek${mmBranchTag}:${version}"

    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.2'
    implementation 'org.apache.logging.log4j:log4j-core:2.23.1'
    implementation 'org.apache.pdfbox:pdfbox:2.0.27'
    implementation ('org.apache.xmlgraphics:batik-bridge:1.14') {
        // We don't need the python and javascript engine taking up space
        exclude group: 'org.python', module: 'jython'
        exclude group: 'org.mozilla', module: 'rhino'
        exclude group: 'xml-apis'
    }
    implementation ('org.apache.xmlgraphics:batik-codec:1.14') {
        exclude group: 'xml-apis'
    }
    implementation ('org.apache.xmlgraphics:batik-dom:1.14') {
        exclude group: 'xml-apis'
    }
    implementation 'org.apache.xmlgraphics:batik-rasterizer:1.14'
    implementation 'org.apache.xmlgraphics:batik-svggen:1.14'
    implementation ('org.apache.xmlgraphics:fop:2.7') {
        // We don't need this proprietary module
        exclude group: 'com.sun.media', module: 'jai-codec'
        exclude group: 'xml-apis'
    }
    testImplementation 'org.mockito:mockito-core:5.12.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'

    runtimeOnly 'org.glassfish.jaxb:jaxb-runtime:4.0.5'

    //Required for printing scaled vector graphics (SVG) - EclipseIDE Comipatability.
    runtimeOnly 'xml-apis:xml-apis-ext:1.3.04'
}

application {
    mainClass = 'megameklab.MegaMekLab'
}

ext {
    mmlJvmOptions = ['-Xmx1024m']
    data = 'data'
    unitFiles = "${data}/mechfiles"
    docs = 'docs'
    lib = 'lib'
    log = 'logs'
    mmconf = 'mmconf'
    userdata = 'userdata'
    distributionDir = "${buildDir}/distributions"
    fileStagingDir = "${buildDir}/files"
    mmRepoDir = "${buildDir}/repo/megamek"
    mmlRepoDir = "${buildDir}/repo/megameklab"
    scriptsDir = "${projectDir}/scripts"
    scriptTemplate = "${scriptsDir}/startScriptTemplate.txt"
}

task mmJar (type: Jar) {
    description = 'Builds a MegaMek jar from the current source'

    dependsOn gradle.includedBuild('megamek').task(':megamek:compileTestJava')

    archiveFileName = "MegaMek.jar"
    from "${mmDir}/megamek/build/classes/java/main"
    from "${mmDir}/megamek/build/resources/main"
    manifest {
        attributes "Main-Class" : 'megamek.MegaMek'
        attributes "Class-Path" : project.sourceSets.main.runtimeClasspath.files
                .findAll { it.name.endsWith(".jar") }
                .collect { "${lib}/${it.name}" }.join(' ')
        attributes "Add-Opens" : 'java.base/java.util java.base/java.util.concurrent'
        attributes "Build-Date" : LocalDateTime.now()
    }
    ext.jarLocation = "${buildDir}/libs/${archiveFileName.get()}"
    inputs.dir "${mmDir}/megamek/build/classes/java/main"
    inputs.dir "${mmDir}/megamek/build/resources/main"
    outputs.file jarLocation
}

jar {
    archiveFileName = "MegaMekLab.jar"
    manifest {
        attributes "Main-Class" : application.mainClass
        attributes "Class-Path" : "${lib}/${mmJar.archiveFileName.get()} " + (project.sourceSets.main.runtimeClasspath.files
                .findAll { it.name.endsWith(".jar") && !it.name.toLowerCase().startsWith("megamek") }
                .collect { "${lib}/${it.name}" }.join(' '))
        attributes "Add-Opens" : 'java.base/java.util java.base/java.util.concurrent'
        attributes "Build-Date" : LocalDateTime.now()
    }
}

task stageFiles(type: Copy) {
    description = 'Stages files that are to be copied into the distribution.'

    from projectDir
    include "${mmconf}/**"
    include "${data}/**"
    include "${docs}/**"
    include 'license.txt'
    include 'SubmitBug.html'
    exclude "**/*.psd"

    into fileStagingDir

    inputs.dir "${mmconf}"
    inputs.dir "${data}"
    inputs.dir "${docs}"
    inputs.files 'license.txt', 'SubmitBug.html'
    outputs.dir fileStagingDir

    doLast {
        mkdir "${fileStagingDir}/${log}"
    }
}

task createStartScripts (type: CreateStartScripts) {
    description = 'Create shell script for generic distribution.'
    applicationName = 'mml'
    mainClass = application.mainClass
    outputDir = startScripts.outputDir
    classpath = jar.outputs.files + files(project.sourceSets.main.runtimeClasspath.files)
            .filter { it.name.endsWith(".jar") }
    defaultJvmOpts = project.ext.mmlJvmOptions
    // The default template assumes the start script is in a subdirectory and always
    // sets APP_HOME to the parent directory of the one containing the script.
    // So we provide a modified template.
    unixStartScriptGenerator.template = resources.text.fromFile(scriptTemplate)
    doLast {
        // The start script assumes all the files on the classpath will be in the lib directory.
        unixScript.text = unixScript.text.replace('lib/MegaMekLab', 'MegaMekLab')
        windowsScript.text = windowsScript.text.replace('lib/MegaMekLab', 'MegaMekLab')
        // The Windows script just has a single line that needs to be changed to put the script in the root,
        // so we'll do a simple replace
        windowsScript.text = windowsScript.text.replace('set APP_HOME=%DIRNAME%..', '')
    }
}

distributions {
    // Creates tasks which package distribution with MM jar and startup script in root directory
    unix {
        distributionBaseName = 'megameklab-unix'
        contents {
            from ("${mmDir}/megamek/mmconf/log4j2.xml") {
                exclude 'log4j2.xml'
            }
            from (fileStagingDir) {
                exclude 'history.txt'
            }
            from (createStartScripts) {
                include 'mml*'
                rename 'mml(.*)', 'mml-startup$1'
            }
            from (mmJar) {
                into "${lib}"
            }
            from (jar)
            from (project.sourceSets.main.runtimeClasspath.files
                    .findAll { it.name.endsWith(".jar") && !it.name.toLowerCase().startsWith("megamek") }) {
                into "${lib}"
            }
            duplicatesStrategy = 'exclude'
        }
    }
    // Creates tasks which package distribution with MM jar wrapped in Windows executable
    windows {
        distributionBaseName = 'megameklab-windows'
        contents {
            from ("${mmDir}/megamek/mmconf/log4j2.xml") {
                exclude 'log4j2.xml'
            }
            from ("${buildDir}/launch4j") {
                include '*.exe'
                include '*.ini'
            }
            from(jar) {
                into "${lib}"
            }
            from(jar)
            from fileStagingDir
            from (project.sourceSets.main.runtimeClasspath.files
                    .findAll { it.name.endsWith(".jar") && !it.name.toLowerCase().startsWith("megamek") }) {
                into "${lib}"
            }
            from (mmJar) {
                into "${lib}"
            }
            duplicatesStrategy = 'exclude'
        }
    }
}

createExe {
    description = 'Create Windows executable that wraps MegaMekLab jar'
    mainClassName = application.mainClass
    outfile = "MegaMekLab.exe"
    icon = "${projectDir}/data/images/misc/megameklab.ico"
    jarTask = project.tasks.jar
    internalName = 'MegaMekLab'
    downloadUrl = 'https://github.com/MegaMek/megamek/wiki/Updating-to-Adoptium'
    supportUrl = 'https://megamek.org'
    copyright = '2024 MegaMek Development Team.'
    trademarks = 'MechWarrior, BattleMech, `Mech and Aerotech - The The Topps Company, Inc. Catalyst Game Labs - InMediaRes Productions, LLC.'
    companyName = "MegaMek Development Team"
    classpath = ["lib/${mmJar.archiveFileName.get()}"] + project.sourceSets.main.runtimeClasspath.files
            .findAll { it.name.endsWith(".jar") && !it.name.toLowerCase().startsWith("megamek")}
            .collect { "${lib}/${it.name}" }
    jvmOptions = project.ext.mmlJvmOptions
    jreMinVersion = '17'
    messagesJreVersionError = 'We require a Java Runtime of version 17 or higher installed. https://github.com/MegaMek/megamek/wiki/Updating-to-Adoptium'
    messagesJreNotFoundError = 'Go here for instructions on installing the correct version of Java: https://github.com/MegaMek/megamek/wiki/Updating-to-Adoptium'
    dontWrapJar = true
    doLast {
        new File("${buildDir}/launch4j/MegaMekLab.l4j.ini").text = """# Launch4j runtime config
# you can add arguments here that will be processed by the JVM at runtime
${project.ext.mmlJvmOptions.join('\n')}
"""
    }
}

windowsDistTar {
    description = 'Creates Windows distribution packaged as a tar.gz archive'
    dependsOn stageFiles
    dependsOn createExe
    archiveExtension = 'tar.gz'
    compression = Compression.GZIP
}

windowsDistZip {
    description = 'Creates Windows distribution packaged as a zip archive'
    dependsOn stageFiles
    dependsOn createExe
}

unixDistZip {
    description = 'Creates *nix distribution packaged as a zip'
    dependsOn stageFiles
    dependsOn startScripts
}

unixDistTar {
    description = 'Creates *nix distribution packaged as a tar ball'
    dependsOn stageFiles
    dependsOn startScripts
    archiveExtension = 'tar.gz'
    compression = Compression.GZIP
}

distZip {
    description = 'Creates *nix distribution packaged as a zip'
    dependsOn stageFiles
    dependsOn createStartScripts
    dependsOn startScripts
}

distTar {
    description = 'Creates *nix distribution packaged as a tar ball'
    dependsOn stageFiles
    dependsOn createStartScripts
    dependsOn startScripts
    archiveExtension = 'tar.gz'
    compression = Compression.GZIP
}

// The repository can only be cloned into an empty directory so we need to delete anything left over
// from a previous build
task deleteMMRepoDir (type: Delete) {
    delete = "${mmRepoDir}"
}

task deleteMMLRepoDir (type: Delete) {
    delete = "${mmlRepoDir}"
}

task cloneMMRepo (type: Exec, dependsOn: deleteMMRepoDir) {
    description = 'Clones the MegaMek repository to ensure we are working with a clean directory tree'
    group = 'distribution'
    commandLine "git"
    args "clone", "--branch", mmBranch, "--single-branch", mmGitRoot, "${mmRepoDir}"
}

task cloneMMLRepo (type: Exec, dependsOn: deleteMMLRepoDir) {
    description = 'Clones the MegaMekLab repository to ensure we are working with a clean directory tree'
    group = 'distribution'
    commandLine "git"
    args "clone", "--branch", mmlBranch, "--single-branch", mmlGitRoot, "${mmlRepoDir}"
}

task sourceZip (type: Zip) {
    description 'Creates a zip archive of the source'
    group = 'distribution'
    from (rootDir) {
        exclude "**/build/**"
        exclude "**/.*"
    }
    archiveFileName = "megameklab-${archiveVersion}-source.zip"
    destinationDirectory = file(distributionDir)
}

task sourceTar (type: Tar) {
    description 'Creates a compressed tar archive of the source'
    from (rootDir) {
        exclude "**/build/**"
        exclude "**/.*"
    }
    archiveFileName = "megameklab-${archiveVersion}-source.tar.gz"
    compression = Compression.GZIP
    destinationDirectory = file(distributionDir)
}

// The distribution plugin adds the distro packages to the assemble task, which causes the build task
// to run all the packaging tasks.
task assemble(overwrite: true) {
    dependsOn jar
}

// Replace the assembleDist task created by the distributions plugin to create the packages we want to
task assembleDist(overwrite: true) {
    description = 'Build unix, Windows, and source packages'
    group = 'distribution'
    dependsOn test
    dependsOn unixDistTar
    dependsOn windowsDistZip
}

task buildFromRepo (type: GradleBuild) {
    description = 'Assembles the distribution packages in the clean repository copy'
    group = 'distribution'
    dependsOn cloneMMRepo
    dependsOn cloneMMLRepo

    buildName = "mml-build-repo"
    dir = "${mmlRepoDir}"
    tasks = [ 'assembleDist' ]
}

task release (type: Copy) {
    description = 'Builds the release packages from the repository and copies them into the project build directory'
    group = 'distribution'
    dependsOn buildFromRepo

    from "${mmlRepoDir}/build/distributions"
    into "${distributionDir}"
}

task sourcesJar(type: Jar) {
    description = 'Creates a source archive for publication to a maven repository'
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar) {
    description = 'Creates a documentation archive for publication to a maven repository'
    from javadoc
    archiveClassifier = 'javadoc'
}

publishing {
    publications {
        publishMMLibrary(MavenPublication) {
            artifactId = "megameklab${mmlBranchTag}"
            from components.java
            artifact sourcesJar
//            artifact javadocJar

            pom {
                name = "MegaMekLab"
                description = "MegaMekLab"
                url = "https://megamek.org"
                licenses {
                    license {
                        name = "GNU General Public License, version 2"
                        url = "https://www.gnu.org/licenses/gpl-2.0.html"
                    }
                }
            }
        }
    }
}

test {
    useJUnitPlatform()
    // report is always generated after tests run
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    // tests are required to run before generating the report
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
}
